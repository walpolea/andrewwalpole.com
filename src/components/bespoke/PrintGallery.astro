---


const media_root = '/static/work/3d/';
const media = [
  { 
    m:"armyofjacks.jpg",
    c:"",
    alt:""
  },
  { 
    m:"foodholders.jpg",
    c:"h2",
    alt:""
  },
  { 
    m:"gingerjack.jpg",
    c:"v2",
    alt:""
  },
  { 
    m:"jackmisc.jpg",
    c:"h2",
    alt:""
  },
  { 
    m:"standing-jack.jpg",
    c:"",
    alt:""
  },
  { 
    m:"jackorn.jpg",
    c:"",
    alt:""
  },
  { 
    m:"jackheadlight1.mp4",
    c:"v2",
    alt:""
  },
  { 
    m:"saucy-susan.mp4",
    c:"h2",
    alt:""
  },
  { 
    m:"jacksign.jpg",
    c:"",
    alt:""
  },
  { 
    m:"jackspinner.jpg",
    c:"",
    alt:""
  },
  { 
    m:"jackheadlight2.mp4",
    c:"v2",
    alt:""
  },
  { 
    m:"spinner.mp4",
    c:"",
    alt:""
  },
  { 
    m:"hat-charger.jpg",
    c:"v2",
    alt:""
  },
  { 
    m:"pokemon.jpg",
    c:"h2",
    alt:""
  },
  { 
    m:"hufflepuff.jpg",
    c:"",
    alt:""
  },
  { 
    m:"question-block.jpg",
    c:"",
    alt:""
  },
  { 
    m:"badge.jpg",
    c:"",
    alt:""
  },
  { 
    m:"cubicles.jpg",
    c:"h2",
    alt:""
  },
  { 
    m:"qdoba.jpg",
    c:"",
    alt:""
  },
  { 
    m:"qdobalightup.jpg",
    c:"v2",
    alt:""
  },
  { 
    m:"qbox.jpg",
    c:"v2",
    alt:""
  },
  { 
    m:"qdobaordersign.jpg",
    c:"h2",
    alt:""
  },
  { 
    m:"qdobaorn.jpg",
    c:"",
    alt:""
  },
  { 
    m:"qlight.mp4",
    c:"",
    alt:""
  },
  { 
    m:"taphandle.jpg",
    c:"v2",
    alt:""
  },
  { 
    m:"spirit.jpg",
    c:"h2",
    alt:""
  },
  { 
    m:"kirby.jpg",
    c:"",
    alt:""
  },
  { 
    m:"tacos.jpg",
    c:"",
    alt:""
  },
  { 
    m:"tacostall.jpg",
    c:"v2",
    alt:""
  },
  { 
    m:"trainat.jpg",
    c:"",
    alt:""
  },
  { 
    m:"tomnook1.jpg",
    c:"v2",
    alt:""
  },
  { 
    m:"tomnook2.jpg",
    c:"",
    alt:""
  },
  { 
    m:"tomnook3.jpg",
    c:"v2",
    alt:""
  },
  { 
    m:"plane-launcher.mp4",
    c:"",
    alt:""
  },
  { 
    m:"planeta-ensaymada.jpg",
    c:"",
    alt:""
  },
  { 
    m:"pencil-award.mp4",
    c:"v2",
    alt:""
  },
  { 
    m:"ju-award.jpg",
    c:"",
    alt:""
  },
  { 
    m:"tikis.jpg",
    c:"",
    alt:""
  },
  { 
    m:"pinboard.jpg",
    c:"",
    alt:""
  },
  { 
    m:"stand.jpg",
    c:"h2 v2",
    alt:""
  },
  { 
    m:"adventure.mp4",
    c:"v2",
    alt:""
  },
  { 
    m:"antonio-sign.jpg",
    c:"h2",
    alt:""
  },
  { 
    m:"pumpkin.jpg",
    c:"",
    alt:""
  },
  { 
    m:"jack-awards.jpg",
    c:"",
    alt:""
  },
  { 
    m:"amin-sign.jpg",
    c:"h2",
    alt:""
  },
  { 
    m:"rabble.jpg",
    c:"v2",
    alt:""
  },
  { 
    m:"pencil-award2.jpg",
    c:"",
    alt:""
  },
  { 
    m:"dino.mp4",
    c:"v2",
    alt:""
  },
  { 
    m:"pinboard.mp4",
    c:"",
    alt:""
  },
  { 
    m:"lightswitch.mp4",
    c:"",
    alt:""
  },
  { 
    m:"crunchlabs.jpg",
    c:"",
    alt:""
  },
  { 
    m:"codepen.jpg",
    c:"",
    alt:""
  },
  { 
    m:"fluffington.jpg",
    c:"",
    alt:""
  },
  { 
    m:"jackslinky.jpg",
    c:"",
    alt:""
  },
]
---


<div class="print-gallery">

  { media.map( item => {

    const { m, c, alt } =  item;

    if( m.startsWith('<') ) {

      return (<Fragment set:html={m}/>)
    } else if( m.endsWith('.mp4')) {
      return (
        <div class='media-container' class:list={[c]}>
          <video class="lazy" autoplay playsinline muted loop>
            <source  data-src={media_root + m} type="video/mp4" />
          </video>
        </div>);
    } else {
      return (
      <div class='media-container' class:list={[c]}>
        <img src={media_root + m} loading="lazy" />
      </div>
      );
    }
  })}

</div>


<script>
  document.addEventListener("DOMContentLoaded", function() {
    var lazyVideos = [].slice.call(document.querySelectorAll("video.lazy"));
  
    if ("IntersectionObserver" in window) {
      var lazyVideoObserver = new IntersectionObserver(function(entries, observer) {
        entries.forEach(function(video) {
          if (video.isIntersecting) {
            for (var source in video.target.children) {
              var videoSource = video.target.children[source];
              if (typeof videoSource.tagName === "string" && videoSource.tagName === "SOURCE") {
                videoSource.src = videoSource.dataset.src;
              }
            }
  
            video.target.load();
            video.target.classList.remove("lazy");
            lazyVideoObserver.unobserve(video.target);
          }
        });
      });
  
      lazyVideos.forEach(function(lazyVideo) {
        lazyVideoObserver.observe(lazyVideo);
      });
    }
  });
  </script>


<style lang="scss">

  .print-gallery {

    display:grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-auto-flow: dense;

    @media (max-width: 1024px) {
      grid-template-columns: 1fr 1fr;
    }

    > * {
      aspect-ratio: 1;
      object-fit:Cover;
    }

    .h2 {
      grid-column: span 2;
      aspect-ratio: 2 / 1;
    }

    .v2 {
      grid-row: span 2;
      aspect-ratio: 1 / 2;
    }

    .h2.v2 {
      aspect-ratio:1;
    }

    .h3 {
      grid-column: span 3;
      aspect-ratio: 3 / 1;

    }
    .v3 {
      aspect-ratio: 1 / 3;
      grid-row: span 3;
    }

    blockquote, .media-container {
      width:100%;
      height:100%;
      display:block;
      margin:0;
      overflow:hidden;

      video, img {
        width:100%;
        height:100%;
        object-fit:cover;
      }
    }

    :global(.twitter-tweet-rendered) {
      margin:0;
    }
  }
</style>